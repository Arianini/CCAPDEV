<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CCAPDEV MCO1</title>
    <link rel="stylesheet" href="styles/PostTemplate.css">

    <script>
        /*
        function toggleLike(postId) {
            fetch(`/like/${postId}`, { method: 'POST' })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        location.reload(); // or update UI manually
                    } else {
                        alert("Failed to like post.");
                    }
                });
        }

        function toggleDislike(postId) {
            fetch(`/dislike/${postId}`, { method: 'POST' })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        location.reload(); // or update UI manually
                    } else {
                        alert("Failed to dislike post.");
                    }
                });
        }
        */

        function togglePostOptions(postId) {
            const menu = document.getElementById(`options-menu-${postId}`);
            menu.style.display = menu.style.display === 'none' ? 'block' : 'none';
        }

        function editPost(postId) {
            alert(`Editing post ${postId}`);
        }
                
        function deletePost(postId) {
            alert(`Deleting post ${postId}`);
        }
        
        function reportPost(postId) {
            alert(`Reporting post ${postId}`);
        }
    </script>
</head>
<body>
    <div class="body-container">
        <div class="left-block">
            <h1>Find Your Community!</h1>
            <div class="community-list">
                <a href="#" data-tag="Gaming">Gaming</a>
                <a href="#" data-tag="Food">Food</a>
                <a href="#" data-tag="Artwork">Artwork</a>
                <a href="#" data-tag="Travel">Travel</a>
                <a href="#" data-tag="Animals">Animals</a>
            </div>   
        </div>

        <div id="post-container">
            <!-- Posts will be loaded here dynamically -->
        </div>

        <div class="middle-block">
            <div class="post-feed">
                <h2>Recent Posts</h2>
                {{#each posts}}
                    {{> post this userProfile=userProfile}}
                {{/each}}
            </div>
        </div>
        <!-- Create Post Modal -->
        <div id="create-post-modal" class="modal">
            <div class="modal-content">
                <!-- Modal Header -->
                <div class="modal-header">
                 <h2>Create a Post</h2>
                    <span class="close">&times;</span>
                </div>

                <!-- Modal Body -->
                <div class="modal-body">
                    <div class="modal-profile">
                        <img src="{{userProfile.profilePic}}" alt="Profile Picture" class="profile-picture">
                        <span>{{userProfile.username}}</span>
                    </div>
                    <textarea id="post-caption" placeholder="What's on your mind?"></textarea>

                    <!-- Emoji Picker -->
                    <div class="emoji-picker">
                        <span onclick="addEmoji('üòÄ')">üòÄ</span>
                        <span onclick="addEmoji('‚ù§Ô∏è')">‚ù§Ô∏è</span>
                        <span onclick="addEmoji('üòÇ')">üòÇ</span>
                        <span onclick="addEmoji('üò¢')">üò¢</span>
                        <span onclick="addEmoji('üò°')">üò°</span>
                    </div>

                    <!-- Image Upload Input -->
                    <label for="post-image" class="custom-upload-btn">üì∑ Upload Image</label>
                    <input type="file" id="post-image" accept="image/*" onchange="previewImage(event)" style="display: none;">

                    <!-- Image Preview -->
                    <div id="image-preview-container" style="display: none; max-height: 250px; overflow-y: auto;">
                        <img id="image-preview" src="" alt="Image Preview" style="max-width: 100%; display: block;">
                    </div>
                    <!-- Post Button -->
                    <button class="post-btn" onclick="submitPost()">Post</button>
                </div>
            </div>
        </div>
    </div>
    <script>
            document.addEventListener("DOMContentLoaded", function () {
            let createPostBtn = document.getElementById("create-post-btn");
            let modal = document.getElementById("create-post-modal");
            let closeBtn = document.querySelector(".close");

            modal.style.display = "none";

            if (createPostBtn && modal) {
                createPostBtn.addEventListener("click", function () {
                    modal.style.display = "flex";
                });
            }

            if (closeBtn) {
                closeBtn.addEventListener("click", function () {
                    modal.style.display = "none";
                });
            }

            window.addEventListener("click", function (event) {
                if (event.target === modal) {
                    modal.style.display = "none";
                }
            });
        });

        /* Emoji Picker Function */
        function addEmoji(emoji) {
            let textarea = document.querySelector(".modal-body textarea");
            textarea.value += emoji;
        }

        
        function loadPage(page) {
            fetch(page)
                .then(response => response.text())
                .then(data => {
                    document.getElementById("main-content").innerHTML = data;
                })
                .catch(error => console.log("Error loading page:", error));
        }

        function toggleComments(postId) {
            console.log("Toggling comments for:", postId); 

            let commentSection = document.getElementById(`comments-${postId}`);

            if (commentSection) {
                console.log("Comment section found:", commentSection);

                if (commentSection.style.display === "none" || commentSection.style.display === "") {
                    commentSection.style.display = "block"; 
                } else {
                    commentSection.style.display = "none"; 
                }

                console.log("New display state:", commentSection.style.display); 
            } else {
                console.error("Comment section not found for post:", postId);
            }
        }

        //added for delete comment
        function toggleCommentOptions(commentId) {
            console.log("Toggling menu for comment ID:", commentId);
            
            const allMenus = document.querySelectorAll(".comment-options-menu"); 
            allMenus.forEach(menu => {
                if (menu.id !== `comment-options-${commentId}`) {
                    menu.style.display = "none"; // Close other menus
                }
            });

            const menu = document.getElementById(`comment-options-${commentId}`);
            
            if (menu) {
                menu.style.display = menu.style.display === "none" || menu.style.display === "" ? "block" : "none";
            } else {
                console.error(`Comment options menu NOT found for comment ID: ${commentId}`);
            }
        }


        function addComment(postId) {
            let commentInput = document.querySelector(`#comments-${postId} textarea`);

            if (!commentInput) {
                console.error(`üö® Error: Comment input field not found for post ${postId}`);
                alert("Error: Comment box is missing.");
                return;
            }

            let commentText = commentInput.value.trim();

            if (!commentText) {
                alert("‚ö† Comment cannot be empty!");
                return;
            }

            fetch(`/add-comment/${postId}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ commentText: commentText })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    commentInput.value = ""; 

                    fetch(`/render-comment`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            postId: postId,
                            commentId: data.comment._id,
                            username: data.comment.username,
                            profilePic: data.comment.profilePic,
                            content: data.comment.content
                        })
                    })
                    .then(response => response.text())
                    .then(commentHTML => {
                        let commentSection = document.getElementById(`comments-${postId}`);
                        let newCommentDiv = document.createElement("div");
                        newCommentDiv.innerHTML = commentHTML;
                        commentSection.appendChild(newCommentDiv);
                    })
                    .catch(error => console.error("‚ùå Error rendering comment:", error));
                } else {
                    alert("‚ö† Failed to add comment.");
                }
            })
            .catch(error => console.error("‚ùå Error adding comment:", error));
        }

        function openEditCommentModal(commentId) {
            const modal = document.getElementById(`edit-comment-modal-${commentId}`);
            if (!modal) {
                console.error(`Modal not found for comment: ${commentId}`);
                return;
            }
            modal.style.display = "flex";
        }

        function closeEditCommentModal(commentId) {
            const modal = document.getElementById(`edit-comment-modal-${commentId}`);
            if (modal) {
                modal.style.display = "none";
            }
        }

        function saveEditedComment(commentId) {
            alert("‚ö† Error: Backend not implemented yet.");
        }

        
        function deleteComment(postId, commentId) {
            if (!confirm("Are you sure you want to delete this comment?")) {
                return;
            }

            fetch(`/delete-comment/${postId}/${commentId}`, {
                method: "DELETE",
                headers: { "Content-Type": "application/json" }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById(`comment-${commentId}`).remove();
                    alert("‚úÖ Comment deleted successfully.");
                } else {
                    alert(`‚ö† Error: ${data.error}`);
                }
            })
            .catch(error => {
                console.error("Error deleting comment:", error);
                alert("‚ùå An error occurred while trying to delete the comment.");
            });
        }

        function toggleReplySection(commentId) {
            const replySection = document.getElementById(`reply-section-${commentId}`);
            if (!replySection) {
                console.error(`Reply section not found for comment: ${commentId}`);
                return;
            }
            replySection.style.display = (replySection.style.display === "none" || replySection.style.display === "") ? "block" : "none";
        }

        function submitReply(commentId) {
            const replyInput = document.getElementById(`reply-input-${commentId}`);
            const replyText = replyInput.value.trim();

            if (!replyText) {
                alert("‚ö† Reply cannot be empty!");
                return;
            }

            alert(`üì® Fake reply submitted: "${replyText}"`); 
            replyInput.value = "";
            toggleReplySection(commentId); 
        }

        function cancelReply(commentId) {
            document.getElementById(`reply-input-${commentId}`).value = "";
            toggleReplySection(commentId);
        }
        
        function reportComment(commentId) {
            alert(`Reporting comment ${commentId}`);
        }
    </script>

    <script>
        document.getElementById("profile-btn").addEventListener("click", function() {
            window.location.href = "/Profile"; // Redirect to profile page
        });

        document.addEventListener("DOMContentLoaded", function () {
        let menuBtn = document.getElementById("menu-btn");
        let menuDropdown = document.getElementById("menu-dropdown");

        menuBtn.addEventListener("click", function (event) {
            event.stopPropagation(); 
            menuDropdown.style.display = menuDropdown.style.display === "block" ? "none" : "block";
        });

        document.addEventListener("click", function (event) {
            if (!menuDropdown.contains(event.target) && event.target !== menuBtn) {
                menuDropdown.style.display = "none";
            }
        });

    });
    </script>

    <script>
        document.querySelectorAll(".community-list a").forEach(link => {
            link.addEventListener("click", async function (event) {
                event.preventDefault(); // Prevent default link behavior
                const selectedTag = this.getAttribute("data-tag");
                await fetchAndDisplayPosts(selectedTag);
            });
        });

        async function fetchAndDisplayPosts(tag) {
            const middleBlock = document.querySelector(".middle-block");
            middleBlock.innerHTML = `<h2>${tag} Posts</h2><p>Loading...</p>`;

            try {
                const response = await fetch(`/api/posts?tag=${encodeURIComponent(tag)}`);
                const posts = await response.json();

                if (!posts.length) {
                    middleBlock.innerHTML = `<h2>${tag} Posts</h2><p>No posts found.</p>`;
                    return;
                }

                let postHTML = `<h2>${tag} Posts</h2>`;
                posts.forEach(post => {
                    postHTML += `
                        <div class="post">
                            <!-- User Info -->
                            <div class="user-info">
                                <img src="${post.user.profilePic || '/default-avatar.jpg'}" alt="User profile" class="profile-pic">
                                <span class="username">${post.user.username}</span>
                            </div>

                            <!-- Post Content -->
                            <p>${post.caption}</p>
                            ${post.imageUrl ? `<img src="${post.imageUrl}" alt="Post image" class="post-image">` : ''}

                            <!-- Post Actions -->
                            <div class="post-actions">
                                <button onclick="likePost('${post._id}')">üëç ${post.likesCount}</button>
                                <button onclick="dislikePost('${post._id}')">üëé ${post.dislikesCount}</button>
                                <button onclick="toggleComments('${post._id}')">üí¨ Comments (${post.comments.length})</button>
                            </div>

                            <!-- Comments Section -->
                            <div class="comments" id="comments-${post._id}" style="display: none;">
                                ${post.comments.map(comment => `
                                    <div class="comment">
                                        <strong>${comment.user}</strong>: ${comment.content}
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    `;
                });

                middleBlock.innerHTML = postHTML;
            } catch (error) {
                console.error("Error fetching posts:", error);
                middleBlock.innerHTML = `<h2>${tag} Posts</h2><p>Error loading posts.</p>`;
            }
        }

    </script>
    <script src="/script.js"></script>
</body>
</html>